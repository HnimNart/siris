{
module Lexer

open System;;
open Microsoft.FSharp.Text.Lexing;;
open System.Text;;

(* A lexer definition for Fasto, for use with fslex. *)

(* boilerplate code for all lexer files... *)
let mutable currentLine = 1
let mutable lineStartPos = [0]

let rec getLineCol pos line = function
    |  (p1::ps) ->
        if pos>=p1
        then (line, pos-p1)
        else getLineCol pos (line-1) ps
    |  [] -> (0,0) (* should not happen *)

let getPos (lexbuf : LexBuffer<'char>) =
      getLineCol lexbuf.StartPos.pos_cnum
                 (currentLine)
                 (lineStartPos)

exception LexicalError of string * (int * int) (* (message, (line, column)) *)

let lexerError lexbuf s =
     raise (LexicalError (s, getPos lexbuf))

(* This one is language specific, yet very common. Alternative would
   be to encode every keyword as a regexp. This one is much easier.
   Note that here we recognize specific keywords, and if none matches
   then we assume we have found a user-defined identifier (last case).
*)
let keyword (s, pos) =
     match s with
       | "if"           -> Parser.IF pos
       | "fi"           -> Parser.FI pos
       | "then"         -> Parser.THEN pos
       | "else"         -> Parser.ELSE pos
       | "call"         -> Parser.CALL pos
       | "uncall"       -> Parser.UNCALL pos
       | "repeat"       -> Parser.REPEAT pos
       | "until"        -> Parser.UNTIL pos
       | "procedure"    -> Parser.PROCEDURE pos
       | "end"          -> Parser.END pos
       | "print"        -> Parser.PRINT pos
       | "read"         -> Parser.READ pos
       | "var"          -> Parser.VARDEC pos
       | "global"       -> Parser.GLOBAL pos
       | "local"        -> Parser.LOCAL pos
       | "delocal"      -> Parser.DELOCAL pos
       | _              -> Parser.VAR (s, pos)

}


rule Token = parse
    [' ' '\t' '\r']      { Token lexbuf } (* Whitespace*)
  | ['\n' '\012']         { currentLine  <- currentLine + 1;
                            lineStartPos <-  lexbuf.StartPos.pos_cnum
                                             :: lineStartPos;
                            Token lexbuf } (* newlines *)
  | "//" [^ '\n' '\012']* { Token lexbuf } (* comment *)

  | '0' | ['1'-'9']['0'-'9']* { Parser.NUM
                                  ( int (Encoding.UTF8.GetString(lexbuf.Lexeme))
                                  , getPos lexbuf )
                              }
  | ['a'-'z']['a'-'z''0'-'9' '_']*
                          { keyword ( Encoding.UTF8.GetString(lexbuf.Lexeme)
                                    , getPos lexbuf ) }
  | ['A'-'Z']['a'-'z' 'A'-'Z' '0'-'9' '_']*
                          { Parser.ID (Encoding.UTF8.GetString(lexbuf.Lexeme)
                                       , getPos lexbuf)}
  | "+="                  { Parser.PASSIGN (getPos lexbuf) }
  | "-="                  { Parser.MASSIGN (getPos lexbuf) }
  | "<=>"                 { Parser.SWAP    (getPos lexbuf ) }
  | "||"                  { Parser.OR      (getPos lexbuf) }
  | '+'                   { Parser.PLUS    (getPos lexbuf) }
  | '-'                   { Parser.MINUS   (getPos lexbuf) }
  | '*'                   { Parser.MULT    (getPos lexbuf) }
  | '/'                   { Parser.DIV     (getPos lexbuf) }
  | '%'                   { Parser.MOD     (getPos lexbuf) }
  | "=="                  { Parser.CEQ     (getPos lexbuf) }
  | '='                   { Parser.EQ      (getPos lexbuf) }
  | '<'                   { Parser.LTH     (getPos lexbuf) }
  | '('                   { Parser.LPAR    (getPos lexbuf) }
  | ')'                   { Parser.RPAR    (getPos lexbuf) }
  | '{'                   { Parser.LCURLY  (getPos lexbuf) }
  | '}'                   { Parser.RCURLY  (getPos lexbuf) }
  | '['                   { Parser.LBRACKET (getPos lexbuf)}
  | ']'                   { Parser.RBRACKET (getPos lexbuf)}
  | ';'                   { Parser.SEMIC   (getPos lexbuf) }
  | ','                   { Parser.COMMA   (getPos lexbuf) }
  | eof                   { Parser.EOF     (getPos lexbuf) }
  | _                     { lexerError lexbuf "Illegal symbol in input" }
