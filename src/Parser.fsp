
%{

let p0 = (0,0)

open Microsoft.FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

%}

%token <int*(int*int)> NUM
%token <string*(int*int)> ID
%token <(int*int)> IF THEN ELSE FI
%token <(int*int)> UNTIL REPEAT
%token <(int*int)> CALL UNCALL
%token <(int*int)> PROCEDURE END
%token <(int*int)> INT BOOL
%token <(int*int)> PLUS MINUS MULT DIV MOD
%token <(int*int)> EQ LTH
%token <(int*int)> LPAR RPAR SEMIC EOF
%token <(int*int)> READ WRITE
%token <(int*int)> PASSIGN MASSIGN

%nonassoc whileprec ifprec
%left EQ LTH
%left PLUS MINUS
%left MULT DIV MOD


%start Prog
%type <AbSyn.UntypedProg> Prog
%type <AbSyn.UntypedProcDec List> Procs
%type <AbSyn.UntypedProcDec> Proc

%type <AbSyn.UntypedStatement List> Statements
%type <AbSyn.UntypedStatement> Statement
%type <AbSyn.UntypedExp> Exp
%type <AbSyn.Type> Type



%%

Prog      : Statements Procs  { $1, $2 }
;

Procs     : PROCEDURE Proc  Procs  { $2 :: $3 }
          | PROCEDURE Proc         { $2 :: [] }
          | EOF                    { [] }
;

Proc      : ID Statements END { ProcDec (fst $1, $2, snd $1) }
;

Statements : Statement SEMIC Statements {$1 :: $3}
           | Statement                  {$1 :: []}
           |                            { [] }
;

Statement : ID PASSIGN Exp
                  { PlusAssignment ((fst $1), $3, $2) }
          | ID MASSIGN Exp
                  { MinusAssignment ((fst $1), $3, $2) }
          | IF Exp THEN Statements ELSE Statements FI Exp %prec ifprec
                  { If ($2, $4, $6, $8 , $1) }
          | REPEAT Statements UNTIL Exp %prec whileprec
                  { Repeat ($2, $4, $1)}
          | CALL ID
                  { Call (fst $2, $1)}
          | UNCALL ID
                  { Uncall (fst $2, $1)}
;

Type      : INT        { AbSyn.Int }
          | BOOL       { AbSyn.Bool }
;


Exp : NUM            { Constant (IntVal (fst $1), snd $1) }
    | ID             { Var $1 }
    | Exp PLUS  Exp  { Plus ($1, $3, $2)    }
    | Exp MINUS Exp  { Minus($1, $3, $2)    }
    | Exp MULT  Exp  { Times($1, $3, $2)    }
    | Exp DIV   Exp  { Divide($1, $3, $2)   }
    | Exp MOD   Exp  { Modulo($1, $3, $2)   }
    | Exp EQ    Exp  { Equal ($1, $3, $2)   }
    | Exp LTH   Exp  { Less ($1, $3, $2)    }

;

%%
